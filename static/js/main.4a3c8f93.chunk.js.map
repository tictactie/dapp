{"version":3,"sources":["hooks/useCachedConnection.tsx","hooks/useEthereum.tsx","UserInfo/UserInfo.tsx","NetworkStatus/NetworkStatus.tsx","Mint/Mint.tsx","App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["useCachedConnection","useState","alreadyConnected","setAlreadyConnected","useEffect","a","console","log","window","ethereum","tempProvider","Web3Provider","listAccounts","existingAccounts","length","useEthereum","requiresConnection","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","web3Modal","Web3Modal","network","cacheProvider","provider","setProvider","signer","setSigner","accounts","setAccounts","rejected","setRejected","chainId","setChainId","setNetwork","resetSigner","newSigner","getSigner","getAddress","undefined","init","connect","instance","newProvider","on","getNetwork","name","networkName","UserInfo","props","address","setAddress","className","NetworkStatus","NETWORK","isError","hidden","CONTRACT_ADDRESS","ABI","Mint","contract","setContract","minting","setMinting","tokenId","setTokenId","imageUri","setImageUri","error","setError","getTokenId","receipt","filter","filters","Transfer","events","e","topics","Error","mint","value","ethers","utils","parseEther","from","tx","wait","newTokenId","BigNumber","toString","message","Contract","fetch","tokenURI","metadataResponse","json","metadata","onClick","disabled","target","href","width","src","App","cachedConnection","didConnect","setDidConnect","newAddress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a3c8f93.chunk.js","sourcesContent":["import { Web3Provider } from \"@ethersproject/providers\";\nimport { useEffect, useState } from \"react\";\n\nfunction useCachedConnection() {\n  const [alreadyConnected, setAlreadyConnected] = useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      console.log(\"check cache\");\n      if (window.ethereum) {\n        console.log(\"ethereum\");\n        const tempProvider = new Web3Provider(window.ethereum);\n        const existingAccounts = await tempProvider.listAccounts();\n        console.log(existingAccounts);\n        setAlreadyConnected(existingAccounts.length > 0);\n      }\n\n      return setAlreadyConnected(false);\n    })();\n  }, []);\n\n  return alreadyConnected;\n}\n\nexport default useCachedConnection;\n","import { useState, useEffect } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { JsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport { JsonRpcSigner } from \"@ethersproject/providers/src.ts\";\n\nfunction useEthereum(\n  requiresConnection: boolean\n): [\n  provider: JsonRpcProvider | undefined,\n  signer: JsonRpcSigner | undefined,\n  network: string | undefined,\n  rejected: boolean\n] {\n  const INFURA_ID = process.env.REACT_APP_INFURA_ID;\n  const providerOptions = {\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        infuraId: INFURA_ID,\n      },\n    },\n  };\n  const web3Modal = new Web3Modal({\n    network: \"any\",\n    cacheProvider: true,\n    providerOptions,\n  });\n\n  const [provider, setProvider] = useState<JsonRpcProvider | undefined>();\n  const [signer, setSigner] = useState<JsonRpcSigner | undefined>();\n  const [accounts, setAccounts] = useState<string[]>();\n  const [rejected, setRejected] = useState<boolean>(false);\n  const [chainId, setChainId] = useState<number>();\n  const [network, setNetwork] = useState<string>();\n\n  async function resetSigner() {\n    try {\n      const newSigner = provider?.getSigner();\n      await newSigner?.getAddress();\n      setSigner(newSigner);\n    } catch {\n      setProvider(undefined);\n      setSigner(undefined);\n    }\n  }\n\n  async function init() {\n    try {\n      const instance = await web3Modal.connect();\n      setRejected(false);\n\n      const newProvider = new Web3Provider(instance, \"any\");\n      setProvider(newProvider);\n\n      instance.on(\"accountsChanged\", async (accounts: string[]) => {\n        setAccounts(accounts);\n      });\n\n      instance.on(\"chainChanged\", async (chainId: number) => {\n        setChainId(chainId);\n      });\n    } catch {\n      console.log(\"connection failed\");\n      setRejected(true);\n    }\n  }\n\n  useEffect(() => {\n    (async () => {\n      await resetSigner();\n    })();\n  }, [provider, accounts]);\n\n  useEffect(() => {\n    (async () => {\n      const networkName = (await provider?.getNetwork())?.name;\n      setNetwork(networkName);\n    })();\n  }, [chainId, provider]);\n\n  useEffect(() => {\n    (async () => {\n      if (requiresConnection) {\n        await init();\n      } else {\n        setProvider(undefined);\n      }\n    })();\n  }, [requiresConnection]);\n\n  return [provider, signer, network, rejected];\n}\n\nexport default useEthereum;\n","import { useState, useEffect } from \"react\";\nimport \"./UserInfo.css\";\n\ntype UserInfoProps = {\n  address: string | undefined;\n};\n\nfunction UserInfo(props: UserInfoProps) {\n  const [address, setAddress] = useState<string>();\n\n  useEffect(() => {\n    setAddress(props.address);\n  }, [props.address]);\n\n  return (\n    <div className=\"UserInfo\">\n      <span>Connected account: {address}</span>\n    </div>\n  );\n}\n\nexport default UserInfo;\n","import { useState, useEffect } from \"react\";\nimport \"./NetworkStatus.css\";\n\ntype NetworkStatusProps = {\n  network: string | undefined;\n};\n\nfunction NetworkStatus(props: NetworkStatusProps) {\n  const NETWORK = process.env.REACT_APP_NETWORK;\n\n  const [network, setNetwork] = useState<string>();\n\n  useEffect(() => {\n    setNetwork(props.network);\n  }, [props.network]);\n\n  function isError() {\n    return NETWORK !== network && network !== undefined;\n  }\n\n  return (\n    <div className=\"NetworkStatus\" hidden={!isError()}>\n      {isError() && (\n        <div className=\"error-banner\">\n          <span className=\"error-text\">\n            You are connected to {network} whilst you should be connected to{\" \"}\n            {NETWORK}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default NetworkStatus;\n","import { useState, useEffect } from \"react\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"@ethersproject/providers\";\nimport \"./Mint.css\";\nimport { Contract, ContractReceipt, ethers, BigNumber } from \"ethers\";\n\ntype MintProps = {\n  provider: JsonRpcProvider | undefined;\n  signer: JsonRpcSigner | undefined;\n};\n\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS!;\n\nconst ABI = [\n  \"function mint() public payable\",\n  \"function tokenURI(uint256) public view returns (string memory)\",\n  \"event Transfer(address indexed, address indexed, uint)\",\n];\n\nfunction Mint(props: MintProps) {\n  const [contract, setContract] = useState<Contract>();\n  const [provider, setProvider] = useState<JsonRpcProvider>();\n  const [address, setAddress] = useState<string>();\n  const [minting, setMinting] = useState(false);\n  const [tokenId, setTokenId] = useState<string>();\n  const [imageUri, setImageUri] = useState<string>();\n  const [error, setError] = useState<string>();\n\n  useEffect(() => {\n    setProvider(provider);\n  }, [props.provider]);\n\n  useEffect(() => {\n    (async () => {\n      const signer = props.signer;\n      setAddress(await signer?.getAddress());\n      const contract = signer\n        ? new Contract(CONTRACT_ADDRESS, ABI, signer)\n        : undefined;\n      setContract(contract);\n      setTokenId(undefined);\n    })();\n  }, [props.signer, CONTRACT_ADDRESS, ABI]);\n\n  useEffect(() => {\n    (async () => {\n      if (contract && tokenId) {\n        const metadataResponse = await fetch(await contract?.tokenURI(tokenId));\n        const metadata = await metadataResponse.json();\n        setImageUri(metadata[\"image\"]);\n      }\n    })();\n  }, [tokenId]);\n\n  async function mint() {\n    if (contract) {\n      try {\n        setError(undefined);\n        const tx = await contract.mint({\n          value: ethers.utils.parseEther(\"0.01\"),\n          from: address,\n        });\n\n        setMinting(true);\n        const receipt = await tx.wait(1);\n        setMinting(false);\n\n        function getTokenId(receipt: ContractReceipt) {\n          console.log(receipt);\n          const filter = contract?.filters.Transfer()!;\n          for (const e of receipt.events || []) {\n            if (\n              e.address === filter.address &&\n              e.topics[0] === filter.topics![0]\n            ) {\n              return e.topics[3];\n            }\n          }\n          throw new Error(\"transfer not found\");\n        }\n\n        const newTokenId = getTokenId(receipt);\n        console.log(tokenId);\n        console.log(newTokenId);\n        setTokenId(BigNumber.from(newTokenId).toString());\n      } catch (e) {\n        if (typeof e === \"string\") {\n          setError(e);\n        } else if (e instanceof Error) {\n          setError(e.message);\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"Mint\">\n      {address && (\n        <button onClick={() => mint()} disabled={minting}>\n          Mint\n        </button>\n      )}\n      {minting && <div>Minting in progress...</div>}\n      <br />\n      {!minting && tokenId && (\n        <span>\n          Check your last token on{\" \"}\n          <a\n            target=\"_blank\"\n            href={`https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId}`}\n          >\n            Opensea\n          </a>\n          <br />\n          <img width=\"300\" src={imageUri} />\n        </span>\n      )}\n      <br />\n      {!minting && error && <span>ERROR: {error}</span>}\n    </div>\n  );\n}\n\nexport default Mint;\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport useCachedConnection from \"../hooks/useCachedConnection\";\nimport useEthereum from \"../hooks/useEthereum\";\nimport UserInfo from \"../UserInfo/UserInfo\";\nimport NetworkStatus from \"../NetworkStatus/NetworkStatus\";\nimport Mint from \"../Mint/Mint\";\n\nfunction App() {\n  const cachedConnection = useCachedConnection();\n  const [didConnect, setDidConnect] = useState<boolean>(cachedConnection);\n  const [provider, signer, network, rejected] = useEthereum(didConnect);\n  const [address, setAddress] = useState<string>();\n\n  useEffect(() => {\n    (async () => {\n      const newAddress = await signer?.getAddress();\n      setAddress(newAddress);\n      console.log(newAddress);\n    })();\n  }, [signer]);\n\n  useEffect(() => {\n    (async () => {\n      setDidConnect(provider !== undefined || cachedConnection);\n    })();\n  }, [provider, rejected, cachedConnection]);\n\n  return (\n    <div className=\"App\">\n      <NetworkStatus network={network} />\n      <header className=\"App-header\">\n        {provider === undefined && (\n          <button onClick={() => setDidConnect(true)}>Connect</button>\n        )}\n        <Mint provider={provider} signer={signer} />\n        <UserInfo address={address} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}